#include<bits/stdc++.h>
using namespace std;

class Graph{
    int v;
    list<int>*adj;

public:
    Graph(int v){
        this->v=v;
        adj = new list<int>[v];
    }

    void addEdge(int u,int v){
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    bool isCyclicUtil(int v,bool visited[],int parent){
        visited[v]=true;

        list<int>::iterator i;

        for(i=adj[v].begin();i!=adj[v].end();++i){
            if(!visited[*i])
                if(isCyclicUtil(*i,visited,v))
                    return true;

            else if(*i != parent)
                return true;
        }
        return false;
    }

    bool isCyclic(){
        bool *visited = new bool[v];

        for(int i=0;i<v;i++){
            visited[i]=false;
        }

        for(int u=0;u<v;u++){
            if(!visited[u]){
                if(isCyclicUtil(u,visited,-1))
                    return true;
            }
        }
        return false;
    }

};

int main(){
    Graph g1(5);
    g1.addEdge(1, 0);
    g1.addEdge(0, 2);
    g1.addEdge(2, 1);
    g1.addEdge(0, 3);
    g1.addEdge(3, 4);
    g1.isCyclic()?
       cout << "Graph contains cycle\n":
       cout << "Graph doesn't contain cycle\n";
 
    Graph g2(3);
    g2.addEdge(0, 1);
    g2.addEdge(1, 2);
    g2.isCyclic()?
       cout << "Graph contains cycle\n":
       cout << "Graph doesn't contain cycle\n";
}
