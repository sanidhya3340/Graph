#include<bits/stdc++.h>
using namespace std;

const int N=4;


int cofactor(int mat[][N])
{
    return (mat[1][1]*(mat[2][2]*mat[3][3] - mat[2][3]*mat[3][2]) - mat[1][2]*((mat[2][1]*mat[3][3])-(mat[3][1]*mat[2][3])) + mat[1][3]*((mat[2][1]*mat[3][2])-(mat[3][1]*mat[2][2])));
}

void findspanningtree(int mat[][N]){

    for(int i=0;i<N;i++){
        int count=0;
        for(int j=0;j<N;j++){
            if(mat[i][j]==1){
                count++;
                mat[i][j]=-1;
            }
        }
        mat[i][i]=count;
    }

    for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }

    cout<<cofactor(mat);

}

int main(){
    int mat[N][N]={{0,0,1,1},
                    {0,0,1,1},
                    {1,1,0,1},
                    {1,1,1,0}};

    findspanningtree(mat);
}
